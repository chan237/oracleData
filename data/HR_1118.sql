CREATE OR REPLACE PROCEDURE EMP_PROCEDURE_OUTMODE(
    VEMPNO IN EMPLOYEES.EMPLOYEE_ID%TYPE,
    VNAME OUT EMPLOYEES.FIRST_NAME%TYPE,
    VSALARY OUT EMPLOYEES.SALARY%TYPE,
    VJOBID OUT EMPLOYEES.JOB_ID%TYPE
)
IS
    -- 지역변수
BEGIN
    SELECT FIRST_NAME, SALARY, JOB_ID INTO VNAME, VSALARY,VJOBID
    FROM EMPLOYEES WHERE EMPLOYEE_ID = VEMPNO;
END;
/

 DECLARE
    VNAME VARCHAR2(100);
    VEMP_ROWTYPE EMPLOYEES%ROWTYPE;
BEGIN
    EMP_PROCEDURE_OUTMODE(200,VNAME, VEMP_ROWTYPE.SALARY, VEMP_ROWTYPE.JOB_ID);
    DBMS_OUTPUT.PUT_LINE('이름: '||VEMP_ROWTYPE.FIRST_NAME);
    DBMS_OUTPUT.PUT_LINE('봉급: '||VEMP_ROWTYPE.SALARY);
    DBMS_OUTPUT.PUT_LINE('직책: '||VEMP_ROWTYPE.JOB_ID);
END;
/

DROP TABLE EMP01;
CREATE TABLE EMP01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(20),
    JOB VARCHAR2(50)
);
DESC EMP01;

CREATE OR REPLACE TRIGGER EMP01_TRIGGER
    AFTER INSERT ON EMP01
    FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.EMPNO ||','||:NEW.ENAME||'신입사원이 입사했습니다');
END;
/
INSERT INTO EMP01 VALUES((SELECT NVL(MAX(EMPNO),0)+1 FROM EMP01), DBMS_RANDOM.STRING('U',4),'IT_DEV');
SELECT * FROM EMP01;

CREATE TABLE SAL01(
    SALNO NUMBER(4),
    SAL NUMBER,
    EMPNO NUMBER(4)
);
ALTER TABLE SAL01 ADD CONSTRAINTS SAL01_SALNO_PK PRIMARY KEY(SALNO);
ALTER TABLE SAL01 ADD CONSTRAINTS SAL01_SALNO_FK FOREIGN KEY(EMPNO) REFERENCES EMP01(EMPNO);

SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME = 'SAL01';






--입고 테이블에 상품이 입력되면 입고 수량을 상품 테이블의 재고 수량에 추가하는 트리거를 작성하기

--테이블 생성
CREATE TABLE PRODUCT(
    PCODE CHAR(6),
    PNAME VARCHAR2(20) NOT NULL,
    PMAKER VARCHAR2(50),
    PPRICE NUMBER(8),
    PSTOCK NUMBER DEFAULT 0
);
ALTER TABLE PRODUCT ADD CONSTRAINTS PRODUCT_PCODE_PK PRIMARY KEY(PCODE);

CREATE TABLE RECEIVING(
    RNO NUMBER(6),
    PCODE CHAR(6),
    RDATE DATE DEFAULT SYSDATE,
    RQTY NUMBER(6),
    RPRICE NUMBER(8),
    RAMOUNT NUMBER(8)
);
ALTER TABLE RECEIVING ADD CONSTRAINTS RECEIVING_RNO_PK PRIMARY KEY(RNO);
ALTER TABLE RECEIVING ADD CONSTRAINTS RECEIVING_PCODE_FK FOREIGN KEY(PCODE) REFERENCES PRODUCT(PCODE);

--내용추가
INSERT INTO PRODUCT(PCODE,PNAME,PMAKER,PPRICE)
VALUES('A00001','세탁기','LG',1500000);
INSERT INTO PRODUCT(PCODE,PNAME,PMAKER,PPRICE)
VALUES('A00002','컴퓨터','LG',1000000);
INSERT INTO PRODUCT(PCODE,PNAME,PMAKER,PPRICE)
VALUES('A00003','냉장고','삼성',4500000);

SELECT * FROM PRODUCT;

--트리거 생성
CREATE OR REPLACE TRIGGER IN_TRIGGER
AFTER INSERT ON
RECEIVING FOR EACH
ROW
BEGIN
    UPDATE PRODUCT
    SET PSTOCK = PSTOCK + :NEW.RQTY
    WHERE PCODE = :NEW.PCODE;
END;
/

INSERT INTO RECEIVING(RNO, PCODE, RQTY, RPRICE, RAMOUNT) 
VALUES(1,'A00001',5,850000,950000);

SELECT * FROM RECEIVING;
SELECT * FROM PRODUCT;

INSERT INTO RECEIVING(RNO, PCODE, RQTY, RPRICE, RAMOUNT) 
VALUES(2,'A00002',10,680000,780000);
INSERT INTO RECEIVING(RNO, PCODE, RQTY, RPRICE, RAMOUNT) 
VALUES(3,'A00003',10,250000,300000);
INSERT INTO RECEIVING(RNO, PCODE, RQTY, RPRICE, RAMOUNT) 
VALUES(4,'A00001',35,850000,950000);

CREATE OR REPLACE TRIGGER UP_TRIGGER
AFTER UPDATE ON
RECEIVING FOR EACH
ROW
BEGIN
    UPDATE PRODUCT
    SET PSTOCK = PSTOCK +(-:OLD.RQTY+:NEW.RQTY)
    WHERE PCODE = :NEW.PCODE;
END;
/
UPDATE RECEIVING SET (RQTY=8, RPRICE=1000000, RAMOUNT=1000000); 